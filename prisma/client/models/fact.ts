
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `fact` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model fact
 * 
 */
export type factModel = runtime.Types.Result.DefaultSelection<Prisma.$factPayload>

export type AggregateFact = {
  _count: FactCountAggregateOutputType | null
  _min: FactMinAggregateOutputType | null
  _max: FactMaxAggregateOutputType | null
}

export type FactMinAggregateOutputType = {
  id: string | null
  text: string | null
  created_at: Date | null
  updated_at: Date | null
  embedding_id: string | null
  chapter_id: string | null
}

export type FactMaxAggregateOutputType = {
  id: string | null
  text: string | null
  created_at: Date | null
  updated_at: Date | null
  embedding_id: string | null
  chapter_id: string | null
}

export type FactCountAggregateOutputType = {
  id: number
  text: number
  created_at: number
  updated_at: number
  embedding_id: number
  chapter_id: number
  _all: number
}


export type FactMinAggregateInputType = {
  id?: true
  text?: true
  created_at?: true
  updated_at?: true
  embedding_id?: true
  chapter_id?: true
}

export type FactMaxAggregateInputType = {
  id?: true
  text?: true
  created_at?: true
  updated_at?: true
  embedding_id?: true
  chapter_id?: true
}

export type FactCountAggregateInputType = {
  id?: true
  text?: true
  created_at?: true
  updated_at?: true
  embedding_id?: true
  chapter_id?: true
  _all?: true
}

export type FactAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which fact to aggregate.
   */
  where?: Prisma.factWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of facts to fetch.
   */
  orderBy?: Prisma.factOrderByWithRelationInput | Prisma.factOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.factWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` facts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` facts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned facts
  **/
  _count?: true | FactCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FactMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FactMaxAggregateInputType
}

export type GetFactAggregateType<T extends FactAggregateArgs> = {
      [P in keyof T & keyof AggregateFact]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFact[P]>
    : Prisma.GetScalarType<T[P], AggregateFact[P]>
}




export type factGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.factWhereInput
  orderBy?: Prisma.factOrderByWithAggregationInput | Prisma.factOrderByWithAggregationInput[]
  by: Prisma.FactScalarFieldEnum[] | Prisma.FactScalarFieldEnum
  having?: Prisma.factScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FactCountAggregateInputType | true
  _min?: FactMinAggregateInputType
  _max?: FactMaxAggregateInputType
}

export type FactGroupByOutputType = {
  id: string
  text: string
  created_at: Date
  updated_at: Date
  embedding_id: string
  chapter_id: string
  _count: FactCountAggregateOutputType | null
  _min: FactMinAggregateOutputType | null
  _max: FactMaxAggregateOutputType | null
}

type GetFactGroupByPayload<T extends factGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FactGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FactGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FactGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FactGroupByOutputType[P]>
      }
    >
  >



export type factWhereInput = {
  AND?: Prisma.factWhereInput | Prisma.factWhereInput[]
  OR?: Prisma.factWhereInput[]
  NOT?: Prisma.factWhereInput | Prisma.factWhereInput[]
  id?: Prisma.StringFilter<"fact"> | string
  text?: Prisma.StringFilter<"fact"> | string
  created_at?: Prisma.DateTimeFilter<"fact"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"fact"> | Date | string
  embedding_id?: Prisma.StringFilter<"fact"> | string
  chapter_id?: Prisma.StringFilter<"fact"> | string
  embedding?: Prisma.XOR<Prisma.Ai_cached_embeddingScalarRelationFilter, Prisma.ai_cached_embeddingWhereInput>
  chapter?: Prisma.XOR<Prisma.ChapterScalarRelationFilter, Prisma.chapterWhereInput>
}

export type factOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  embedding_id?: Prisma.SortOrder
  chapter_id?: Prisma.SortOrder
  embedding?: Prisma.ai_cached_embeddingOrderByWithRelationInput
  chapter?: Prisma.chapterOrderByWithRelationInput
}

export type factWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.factWhereInput | Prisma.factWhereInput[]
  OR?: Prisma.factWhereInput[]
  NOT?: Prisma.factWhereInput | Prisma.factWhereInput[]
  text?: Prisma.StringFilter<"fact"> | string
  created_at?: Prisma.DateTimeFilter<"fact"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"fact"> | Date | string
  embedding_id?: Prisma.StringFilter<"fact"> | string
  chapter_id?: Prisma.StringFilter<"fact"> | string
  embedding?: Prisma.XOR<Prisma.Ai_cached_embeddingScalarRelationFilter, Prisma.ai_cached_embeddingWhereInput>
  chapter?: Prisma.XOR<Prisma.ChapterScalarRelationFilter, Prisma.chapterWhereInput>
}, "id">

export type factOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  embedding_id?: Prisma.SortOrder
  chapter_id?: Prisma.SortOrder
  _count?: Prisma.factCountOrderByAggregateInput
  _max?: Prisma.factMaxOrderByAggregateInput
  _min?: Prisma.factMinOrderByAggregateInput
}

export type factScalarWhereWithAggregatesInput = {
  AND?: Prisma.factScalarWhereWithAggregatesInput | Prisma.factScalarWhereWithAggregatesInput[]
  OR?: Prisma.factScalarWhereWithAggregatesInput[]
  NOT?: Prisma.factScalarWhereWithAggregatesInput | Prisma.factScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"fact"> | string
  text?: Prisma.StringWithAggregatesFilter<"fact"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"fact"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"fact"> | Date | string
  embedding_id?: Prisma.StringWithAggregatesFilter<"fact"> | string
  chapter_id?: Prisma.StringWithAggregatesFilter<"fact"> | string
}

export type factCreateInput = {
  id?: string
  text: string
  created_at?: Date | string
  updated_at?: Date | string
  embedding: Prisma.ai_cached_embeddingCreateNestedOneWithoutFactsInput
  chapter: Prisma.chapterCreateNestedOneWithoutFactsInput
}

export type factUncheckedCreateInput = {
  id?: string
  text: string
  created_at?: Date | string
  updated_at?: Date | string
  embedding_id: string
  chapter_id: string
}

export type factUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  embedding?: Prisma.ai_cached_embeddingUpdateOneRequiredWithoutFactsNestedInput
  chapter?: Prisma.chapterUpdateOneRequiredWithoutFactsNestedInput
}

export type factUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  embedding_id?: Prisma.StringFieldUpdateOperationsInput | string
  chapter_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type factCreateManyInput = {
  id?: string
  text: string
  created_at?: Date | string
  updated_at?: Date | string
  embedding_id: string
  chapter_id: string
}

export type factUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type factUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  embedding_id?: Prisma.StringFieldUpdateOperationsInput | string
  chapter_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FactListRelationFilter = {
  every?: Prisma.factWhereInput
  some?: Prisma.factWhereInput
  none?: Prisma.factWhereInput
}

export type factOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type factCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  embedding_id?: Prisma.SortOrder
  chapter_id?: Prisma.SortOrder
}

export type factMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  embedding_id?: Prisma.SortOrder
  chapter_id?: Prisma.SortOrder
}

export type factMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  embedding_id?: Prisma.SortOrder
  chapter_id?: Prisma.SortOrder
}

export type factCreateNestedManyWithoutChapterInput = {
  create?: Prisma.XOR<Prisma.factCreateWithoutChapterInput, Prisma.factUncheckedCreateWithoutChapterInput> | Prisma.factCreateWithoutChapterInput[] | Prisma.factUncheckedCreateWithoutChapterInput[]
  connectOrCreate?: Prisma.factCreateOrConnectWithoutChapterInput | Prisma.factCreateOrConnectWithoutChapterInput[]
  createMany?: Prisma.factCreateManyChapterInputEnvelope
  connect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
}

export type factUncheckedCreateNestedManyWithoutChapterInput = {
  create?: Prisma.XOR<Prisma.factCreateWithoutChapterInput, Prisma.factUncheckedCreateWithoutChapterInput> | Prisma.factCreateWithoutChapterInput[] | Prisma.factUncheckedCreateWithoutChapterInput[]
  connectOrCreate?: Prisma.factCreateOrConnectWithoutChapterInput | Prisma.factCreateOrConnectWithoutChapterInput[]
  createMany?: Prisma.factCreateManyChapterInputEnvelope
  connect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
}

export type factUpdateManyWithoutChapterNestedInput = {
  create?: Prisma.XOR<Prisma.factCreateWithoutChapterInput, Prisma.factUncheckedCreateWithoutChapterInput> | Prisma.factCreateWithoutChapterInput[] | Prisma.factUncheckedCreateWithoutChapterInput[]
  connectOrCreate?: Prisma.factCreateOrConnectWithoutChapterInput | Prisma.factCreateOrConnectWithoutChapterInput[]
  upsert?: Prisma.factUpsertWithWhereUniqueWithoutChapterInput | Prisma.factUpsertWithWhereUniqueWithoutChapterInput[]
  createMany?: Prisma.factCreateManyChapterInputEnvelope
  set?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  disconnect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  delete?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  connect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  update?: Prisma.factUpdateWithWhereUniqueWithoutChapterInput | Prisma.factUpdateWithWhereUniqueWithoutChapterInput[]
  updateMany?: Prisma.factUpdateManyWithWhereWithoutChapterInput | Prisma.factUpdateManyWithWhereWithoutChapterInput[]
  deleteMany?: Prisma.factScalarWhereInput | Prisma.factScalarWhereInput[]
}

export type factUncheckedUpdateManyWithoutChapterNestedInput = {
  create?: Prisma.XOR<Prisma.factCreateWithoutChapterInput, Prisma.factUncheckedCreateWithoutChapterInput> | Prisma.factCreateWithoutChapterInput[] | Prisma.factUncheckedCreateWithoutChapterInput[]
  connectOrCreate?: Prisma.factCreateOrConnectWithoutChapterInput | Prisma.factCreateOrConnectWithoutChapterInput[]
  upsert?: Prisma.factUpsertWithWhereUniqueWithoutChapterInput | Prisma.factUpsertWithWhereUniqueWithoutChapterInput[]
  createMany?: Prisma.factCreateManyChapterInputEnvelope
  set?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  disconnect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  delete?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  connect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  update?: Prisma.factUpdateWithWhereUniqueWithoutChapterInput | Prisma.factUpdateWithWhereUniqueWithoutChapterInput[]
  updateMany?: Prisma.factUpdateManyWithWhereWithoutChapterInput | Prisma.factUpdateManyWithWhereWithoutChapterInput[]
  deleteMany?: Prisma.factScalarWhereInput | Prisma.factScalarWhereInput[]
}

export type factUpdateManyWithoutEmbeddingNestedInput = {
  create?: Prisma.XOR<Prisma.factCreateWithoutEmbeddingInput, Prisma.factUncheckedCreateWithoutEmbeddingInput> | Prisma.factCreateWithoutEmbeddingInput[] | Prisma.factUncheckedCreateWithoutEmbeddingInput[]
  connectOrCreate?: Prisma.factCreateOrConnectWithoutEmbeddingInput | Prisma.factCreateOrConnectWithoutEmbeddingInput[]
  upsert?: Prisma.factUpsertWithWhereUniqueWithoutEmbeddingInput | Prisma.factUpsertWithWhereUniqueWithoutEmbeddingInput[]
  createMany?: Prisma.factCreateManyEmbeddingInputEnvelope
  set?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  disconnect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  delete?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  connect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  update?: Prisma.factUpdateWithWhereUniqueWithoutEmbeddingInput | Prisma.factUpdateWithWhereUniqueWithoutEmbeddingInput[]
  updateMany?: Prisma.factUpdateManyWithWhereWithoutEmbeddingInput | Prisma.factUpdateManyWithWhereWithoutEmbeddingInput[]
  deleteMany?: Prisma.factScalarWhereInput | Prisma.factScalarWhereInput[]
}

export type factUncheckedUpdateManyWithoutEmbeddingNestedInput = {
  create?: Prisma.XOR<Prisma.factCreateWithoutEmbeddingInput, Prisma.factUncheckedCreateWithoutEmbeddingInput> | Prisma.factCreateWithoutEmbeddingInput[] | Prisma.factUncheckedCreateWithoutEmbeddingInput[]
  connectOrCreate?: Prisma.factCreateOrConnectWithoutEmbeddingInput | Prisma.factCreateOrConnectWithoutEmbeddingInput[]
  upsert?: Prisma.factUpsertWithWhereUniqueWithoutEmbeddingInput | Prisma.factUpsertWithWhereUniqueWithoutEmbeddingInput[]
  createMany?: Prisma.factCreateManyEmbeddingInputEnvelope
  set?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  disconnect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  delete?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  connect?: Prisma.factWhereUniqueInput | Prisma.factWhereUniqueInput[]
  update?: Prisma.factUpdateWithWhereUniqueWithoutEmbeddingInput | Prisma.factUpdateWithWhereUniqueWithoutEmbeddingInput[]
  updateMany?: Prisma.factUpdateManyWithWhereWithoutEmbeddingInput | Prisma.factUpdateManyWithWhereWithoutEmbeddingInput[]
  deleteMany?: Prisma.factScalarWhereInput | Prisma.factScalarWhereInput[]
}

export type factCreateWithoutChapterInput = {
  id?: string
  text: string
  created_at?: Date | string
  updated_at?: Date | string
  embedding: Prisma.ai_cached_embeddingCreateNestedOneWithoutFactsInput
}

export type factUncheckedCreateWithoutChapterInput = {
  id?: string
  text: string
  created_at?: Date | string
  updated_at?: Date | string
  embedding_id: string
}

export type factCreateOrConnectWithoutChapterInput = {
  where: Prisma.factWhereUniqueInput
  create: Prisma.XOR<Prisma.factCreateWithoutChapterInput, Prisma.factUncheckedCreateWithoutChapterInput>
}

export type factCreateManyChapterInputEnvelope = {
  data: Prisma.factCreateManyChapterInput | Prisma.factCreateManyChapterInput[]
  skipDuplicates?: boolean
}

export type factUpsertWithWhereUniqueWithoutChapterInput = {
  where: Prisma.factWhereUniqueInput
  update: Prisma.XOR<Prisma.factUpdateWithoutChapterInput, Prisma.factUncheckedUpdateWithoutChapterInput>
  create: Prisma.XOR<Prisma.factCreateWithoutChapterInput, Prisma.factUncheckedCreateWithoutChapterInput>
}

export type factUpdateWithWhereUniqueWithoutChapterInput = {
  where: Prisma.factWhereUniqueInput
  data: Prisma.XOR<Prisma.factUpdateWithoutChapterInput, Prisma.factUncheckedUpdateWithoutChapterInput>
}

export type factUpdateManyWithWhereWithoutChapterInput = {
  where: Prisma.factScalarWhereInput
  data: Prisma.XOR<Prisma.factUpdateManyMutationInput, Prisma.factUncheckedUpdateManyWithoutChapterInput>
}

export type factScalarWhereInput = {
  AND?: Prisma.factScalarWhereInput | Prisma.factScalarWhereInput[]
  OR?: Prisma.factScalarWhereInput[]
  NOT?: Prisma.factScalarWhereInput | Prisma.factScalarWhereInput[]
  id?: Prisma.StringFilter<"fact"> | string
  text?: Prisma.StringFilter<"fact"> | string
  created_at?: Prisma.DateTimeFilter<"fact"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"fact"> | Date | string
  embedding_id?: Prisma.StringFilter<"fact"> | string
  chapter_id?: Prisma.StringFilter<"fact"> | string
}

export type factCreateWithoutEmbeddingInput = {
  id?: string
  text: string
  created_at?: Date | string
  updated_at?: Date | string
  chapter: Prisma.chapterCreateNestedOneWithoutFactsInput
}

export type factUncheckedCreateWithoutEmbeddingInput = {
  id?: string
  text: string
  created_at?: Date | string
  updated_at?: Date | string
  chapter_id: string
}

export type factCreateOrConnectWithoutEmbeddingInput = {
  where: Prisma.factWhereUniqueInput
  create: Prisma.XOR<Prisma.factCreateWithoutEmbeddingInput, Prisma.factUncheckedCreateWithoutEmbeddingInput>
}

export type factUpsertWithWhereUniqueWithoutEmbeddingInput = {
  where: Prisma.factWhereUniqueInput
  update: Prisma.XOR<Prisma.factUpdateWithoutEmbeddingInput, Prisma.factUncheckedUpdateWithoutEmbeddingInput>
  create: Prisma.XOR<Prisma.factCreateWithoutEmbeddingInput, Prisma.factUncheckedCreateWithoutEmbeddingInput>
}

export type factCreateManyEmbeddingInputEnvelope = {
  data: Prisma.factCreateManyEmbeddingInput | Prisma.factCreateManyEmbeddingInput[]
  skipDuplicates?: boolean
}

export type factUpdateWithWhereUniqueWithoutEmbeddingInput = {
  where: Prisma.factWhereUniqueInput
  data: Prisma.XOR<Prisma.factUpdateWithoutEmbeddingInput, Prisma.factUncheckedUpdateWithoutEmbeddingInput>
}

export type factUpdateManyWithWhereWithoutEmbeddingInput = {
  where: Prisma.factScalarWhereInput
  data: Prisma.XOR<Prisma.factUpdateManyMutationInput, Prisma.factUncheckedUpdateManyWithoutEmbeddingInput>
}

export type factCreateManyChapterInput = {
  id?: string
  text: string
  created_at?: Date | string
  updated_at?: Date | string
  embedding_id: string
}

export type factUpdateWithoutChapterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  embedding?: Prisma.ai_cached_embeddingUpdateOneRequiredWithoutFactsNestedInput
}

export type factUncheckedUpdateWithoutChapterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  embedding_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type factUncheckedUpdateManyWithoutChapterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  embedding_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type factUpdateWithoutEmbeddingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chapter?: Prisma.chapterUpdateOneRequiredWithoutFactsNestedInput
}

export type factUncheckedUpdateWithoutEmbeddingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chapter_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type factCreateManyEmbeddingInput = {
  id?: string
  text: string
  created_at?: Date | string
  updated_at?: Date | string
  chapter_id: string
}

export type factUncheckedUpdateManyWithoutEmbeddingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chapter_id?: Prisma.StringFieldUpdateOperationsInput | string
}



export type factSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  created_at?: boolean
  updated_at?: boolean
  embedding_id?: boolean
  chapter_id?: boolean
  embedding?: boolean | Prisma.ai_cached_embeddingDefaultArgs<ExtArgs>
  chapter?: boolean | Prisma.chapterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fact"]>

export type factSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  created_at?: boolean
  updated_at?: boolean
  embedding_id?: boolean
  chapter_id?: boolean
  embedding?: boolean | Prisma.ai_cached_embeddingDefaultArgs<ExtArgs>
  chapter?: boolean | Prisma.chapterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fact"]>

export type factSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  created_at?: boolean
  updated_at?: boolean
  embedding_id?: boolean
  chapter_id?: boolean
  embedding?: boolean | Prisma.ai_cached_embeddingDefaultArgs<ExtArgs>
  chapter?: boolean | Prisma.chapterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fact"]>

export type factSelectScalar = {
  id?: boolean
  text?: boolean
  created_at?: boolean
  updated_at?: boolean
  embedding_id?: boolean
  chapter_id?: boolean
}

export type factOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "text" | "created_at" | "updated_at" | "embedding_id" | "chapter_id", ExtArgs["result"]["fact"]>
export type factInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  embedding?: boolean | Prisma.ai_cached_embeddingDefaultArgs<ExtArgs>
  chapter?: boolean | Prisma.chapterDefaultArgs<ExtArgs>
}
export type factIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  embedding?: boolean | Prisma.ai_cached_embeddingDefaultArgs<ExtArgs>
  chapter?: boolean | Prisma.chapterDefaultArgs<ExtArgs>
}
export type factIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  embedding?: boolean | Prisma.ai_cached_embeddingDefaultArgs<ExtArgs>
  chapter?: boolean | Prisma.chapterDefaultArgs<ExtArgs>
}

export type $factPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "fact"
  objects: {
    embedding: Prisma.$ai_cached_embeddingPayload<ExtArgs>
    chapter: Prisma.$chapterPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    text: string
    created_at: Date
    updated_at: Date
    embedding_id: string
    chapter_id: string
  }, ExtArgs["result"]["fact"]>
  composites: {}
}

export type factGetPayload<S extends boolean | null | undefined | factDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$factPayload, S>

export type factCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<factFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FactCountAggregateInputType | true
  }

export interface factDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fact'], meta: { name: 'fact' } }
  /**
   * Find zero or one Fact that matches the filter.
   * @param {factFindUniqueArgs} args - Arguments to find a Fact
   * @example
   * // Get one Fact
   * const fact = await prisma.fact.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends factFindUniqueArgs>(args: Prisma.SelectSubset<T, factFindUniqueArgs<ExtArgs>>): Prisma.Prisma__factClient<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Fact that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {factFindUniqueOrThrowArgs} args - Arguments to find a Fact
   * @example
   * // Get one Fact
   * const fact = await prisma.fact.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends factFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, factFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__factClient<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fact that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {factFindFirstArgs} args - Arguments to find a Fact
   * @example
   * // Get one Fact
   * const fact = await prisma.fact.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends factFindFirstArgs>(args?: Prisma.SelectSubset<T, factFindFirstArgs<ExtArgs>>): Prisma.Prisma__factClient<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fact that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {factFindFirstOrThrowArgs} args - Arguments to find a Fact
   * @example
   * // Get one Fact
   * const fact = await prisma.fact.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends factFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, factFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__factClient<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Facts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {factFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Facts
   * const facts = await prisma.fact.findMany()
   * 
   * // Get first 10 Facts
   * const facts = await prisma.fact.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const factWithIdOnly = await prisma.fact.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends factFindManyArgs>(args?: Prisma.SelectSubset<T, factFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Fact.
   * @param {factCreateArgs} args - Arguments to create a Fact.
   * @example
   * // Create one Fact
   * const Fact = await prisma.fact.create({
   *   data: {
   *     // ... data to create a Fact
   *   }
   * })
   * 
   */
  create<T extends factCreateArgs>(args: Prisma.SelectSubset<T, factCreateArgs<ExtArgs>>): Prisma.Prisma__factClient<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Facts.
   * @param {factCreateManyArgs} args - Arguments to create many Facts.
   * @example
   * // Create many Facts
   * const fact = await prisma.fact.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends factCreateManyArgs>(args?: Prisma.SelectSubset<T, factCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Facts and returns the data saved in the database.
   * @param {factCreateManyAndReturnArgs} args - Arguments to create many Facts.
   * @example
   * // Create many Facts
   * const fact = await prisma.fact.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Facts and only return the `id`
   * const factWithIdOnly = await prisma.fact.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends factCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, factCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Fact.
   * @param {factDeleteArgs} args - Arguments to delete one Fact.
   * @example
   * // Delete one Fact
   * const Fact = await prisma.fact.delete({
   *   where: {
   *     // ... filter to delete one Fact
   *   }
   * })
   * 
   */
  delete<T extends factDeleteArgs>(args: Prisma.SelectSubset<T, factDeleteArgs<ExtArgs>>): Prisma.Prisma__factClient<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Fact.
   * @param {factUpdateArgs} args - Arguments to update one Fact.
   * @example
   * // Update one Fact
   * const fact = await prisma.fact.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends factUpdateArgs>(args: Prisma.SelectSubset<T, factUpdateArgs<ExtArgs>>): Prisma.Prisma__factClient<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Facts.
   * @param {factDeleteManyArgs} args - Arguments to filter Facts to delete.
   * @example
   * // Delete a few Facts
   * const { count } = await prisma.fact.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends factDeleteManyArgs>(args?: Prisma.SelectSubset<T, factDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Facts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {factUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Facts
   * const fact = await prisma.fact.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends factUpdateManyArgs>(args: Prisma.SelectSubset<T, factUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Facts and returns the data updated in the database.
   * @param {factUpdateManyAndReturnArgs} args - Arguments to update many Facts.
   * @example
   * // Update many Facts
   * const fact = await prisma.fact.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Facts and only return the `id`
   * const factWithIdOnly = await prisma.fact.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends factUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, factUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Fact.
   * @param {factUpsertArgs} args - Arguments to update or create a Fact.
   * @example
   * // Update or create a Fact
   * const fact = await prisma.fact.upsert({
   *   create: {
   *     // ... data to create a Fact
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Fact we want to update
   *   }
   * })
   */
  upsert<T extends factUpsertArgs>(args: Prisma.SelectSubset<T, factUpsertArgs<ExtArgs>>): Prisma.Prisma__factClient<runtime.Types.Result.GetResult<Prisma.$factPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Facts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {factCountArgs} args - Arguments to filter Facts to count.
   * @example
   * // Count the number of Facts
   * const count = await prisma.fact.count({
   *   where: {
   *     // ... the filter for the Facts we want to count
   *   }
   * })
  **/
  count<T extends factCountArgs>(
    args?: Prisma.Subset<T, factCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FactCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Fact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FactAggregateArgs>(args: Prisma.Subset<T, FactAggregateArgs>): Prisma.PrismaPromise<GetFactAggregateType<T>>

  /**
   * Group by Fact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {factGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends factGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: factGroupByArgs['orderBy'] }
      : { orderBy?: factGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, factGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the fact model
 */
readonly fields: factFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for fact.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__factClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  embedding<T extends Prisma.ai_cached_embeddingDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ai_cached_embeddingDefaultArgs<ExtArgs>>): Prisma.Prisma__ai_cached_embeddingClient<runtime.Types.Result.GetResult<Prisma.$ai_cached_embeddingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  chapter<T extends Prisma.chapterDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.chapterDefaultArgs<ExtArgs>>): Prisma.Prisma__chapterClient<runtime.Types.Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the fact model
 */
export interface factFieldRefs {
  readonly id: Prisma.FieldRef<"fact", 'String'>
  readonly text: Prisma.FieldRef<"fact", 'String'>
  readonly created_at: Prisma.FieldRef<"fact", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"fact", 'DateTime'>
  readonly embedding_id: Prisma.FieldRef<"fact", 'String'>
  readonly chapter_id: Prisma.FieldRef<"fact", 'String'>
}
    

// Custom InputTypes
/**
 * fact findUnique
 */
export type factFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
  /**
   * Filter, which fact to fetch.
   */
  where: Prisma.factWhereUniqueInput
}

/**
 * fact findUniqueOrThrow
 */
export type factFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
  /**
   * Filter, which fact to fetch.
   */
  where: Prisma.factWhereUniqueInput
}

/**
 * fact findFirst
 */
export type factFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
  /**
   * Filter, which fact to fetch.
   */
  where?: Prisma.factWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of facts to fetch.
   */
  orderBy?: Prisma.factOrderByWithRelationInput | Prisma.factOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for facts.
   */
  cursor?: Prisma.factWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` facts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` facts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of facts.
   */
  distinct?: Prisma.FactScalarFieldEnum | Prisma.FactScalarFieldEnum[]
}

/**
 * fact findFirstOrThrow
 */
export type factFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
  /**
   * Filter, which fact to fetch.
   */
  where?: Prisma.factWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of facts to fetch.
   */
  orderBy?: Prisma.factOrderByWithRelationInput | Prisma.factOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for facts.
   */
  cursor?: Prisma.factWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` facts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` facts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of facts.
   */
  distinct?: Prisma.FactScalarFieldEnum | Prisma.FactScalarFieldEnum[]
}

/**
 * fact findMany
 */
export type factFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
  /**
   * Filter, which facts to fetch.
   */
  where?: Prisma.factWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of facts to fetch.
   */
  orderBy?: Prisma.factOrderByWithRelationInput | Prisma.factOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing facts.
   */
  cursor?: Prisma.factWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` facts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` facts.
   */
  skip?: number
  distinct?: Prisma.FactScalarFieldEnum | Prisma.FactScalarFieldEnum[]
}

/**
 * fact create
 */
export type factCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
  /**
   * The data needed to create a fact.
   */
  data: Prisma.XOR<Prisma.factCreateInput, Prisma.factUncheckedCreateInput>
}

/**
 * fact createMany
 */
export type factCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many facts.
   */
  data: Prisma.factCreateManyInput | Prisma.factCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * fact createManyAndReturn
 */
export type factCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * The data used to create many facts.
   */
  data: Prisma.factCreateManyInput | Prisma.factCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * fact update
 */
export type factUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
  /**
   * The data needed to update a fact.
   */
  data: Prisma.XOR<Prisma.factUpdateInput, Prisma.factUncheckedUpdateInput>
  /**
   * Choose, which fact to update.
   */
  where: Prisma.factWhereUniqueInput
}

/**
 * fact updateMany
 */
export type factUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update facts.
   */
  data: Prisma.XOR<Prisma.factUpdateManyMutationInput, Prisma.factUncheckedUpdateManyInput>
  /**
   * Filter which facts to update
   */
  where?: Prisma.factWhereInput
  /**
   * Limit how many facts to update.
   */
  limit?: number
}

/**
 * fact updateManyAndReturn
 */
export type factUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * The data used to update facts.
   */
  data: Prisma.XOR<Prisma.factUpdateManyMutationInput, Prisma.factUncheckedUpdateManyInput>
  /**
   * Filter which facts to update
   */
  where?: Prisma.factWhereInput
  /**
   * Limit how many facts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * fact upsert
 */
export type factUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
  /**
   * The filter to search for the fact to update in case it exists.
   */
  where: Prisma.factWhereUniqueInput
  /**
   * In case the fact found by the `where` argument doesn't exist, create a new fact with this data.
   */
  create: Prisma.XOR<Prisma.factCreateInput, Prisma.factUncheckedCreateInput>
  /**
   * In case the fact was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.factUpdateInput, Prisma.factUncheckedUpdateInput>
}

/**
 * fact delete
 */
export type factDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
  /**
   * Filter which fact to delete.
   */
  where: Prisma.factWhereUniqueInput
}

/**
 * fact deleteMany
 */
export type factDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which facts to delete
   */
  where?: Prisma.factWhereInput
  /**
   * Limit how many facts to delete.
   */
  limit?: number
}

/**
 * fact without action
 */
export type factDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fact
   */
  select?: Prisma.factSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fact
   */
  omit?: Prisma.factOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.factInclude<ExtArgs> | null
}
