
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `book` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model book
 * 
 */
export type bookModel = runtime.Types.Result.DefaultSelection<Prisma.$bookPayload>

export type AggregateBook = {
  _count: BookCountAggregateOutputType | null
  _avg: BookAvgAggregateOutputType | null
  _sum: BookSumAggregateOutputType | null
  _min: BookMinAggregateOutputType | null
  _max: BookMaxAggregateOutputType | null
}

export type BookAvgAggregateOutputType = {
  total_pages: number | null
}

export type BookSumAggregateOutputType = {
  total_pages: number | null
}

export type BookMinAggregateOutputType = {
  id: string | null
  created_at: Date | null
  updated_at: Date | null
  title: string | null
  author: string | null
  isbn: string | null
  external_id: string | null
  status: $Enums.book_status | null
  file_path: string | null
  total_pages: number | null
}

export type BookMaxAggregateOutputType = {
  id: string | null
  created_at: Date | null
  updated_at: Date | null
  title: string | null
  author: string | null
  isbn: string | null
  external_id: string | null
  status: $Enums.book_status | null
  file_path: string | null
  total_pages: number | null
}

export type BookCountAggregateOutputType = {
  id: number
  created_at: number
  updated_at: number
  title: number
  author: number
  isbn: number
  external_id: number
  status: number
  file_path: number
  total_pages: number
  _all: number
}


export type BookAvgAggregateInputType = {
  total_pages?: true
}

export type BookSumAggregateInputType = {
  total_pages?: true
}

export type BookMinAggregateInputType = {
  id?: true
  created_at?: true
  updated_at?: true
  title?: true
  author?: true
  isbn?: true
  external_id?: true
  status?: true
  file_path?: true
  total_pages?: true
}

export type BookMaxAggregateInputType = {
  id?: true
  created_at?: true
  updated_at?: true
  title?: true
  author?: true
  isbn?: true
  external_id?: true
  status?: true
  file_path?: true
  total_pages?: true
}

export type BookCountAggregateInputType = {
  id?: true
  created_at?: true
  updated_at?: true
  title?: true
  author?: true
  isbn?: true
  external_id?: true
  status?: true
  file_path?: true
  total_pages?: true
  _all?: true
}

export type BookAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which book to aggregate.
   */
  where?: Prisma.bookWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of books to fetch.
   */
  orderBy?: Prisma.bookOrderByWithRelationInput | Prisma.bookOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.bookWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` books from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` books.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned books
  **/
  _count?: true | BookCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BookAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BookSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BookMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BookMaxAggregateInputType
}

export type GetBookAggregateType<T extends BookAggregateArgs> = {
      [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBook[P]>
    : Prisma.GetScalarType<T[P], AggregateBook[P]>
}




export type bookGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.bookWhereInput
  orderBy?: Prisma.bookOrderByWithAggregationInput | Prisma.bookOrderByWithAggregationInput[]
  by: Prisma.BookScalarFieldEnum[] | Prisma.BookScalarFieldEnum
  having?: Prisma.bookScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BookCountAggregateInputType | true
  _avg?: BookAvgAggregateInputType
  _sum?: BookSumAggregateInputType
  _min?: BookMinAggregateInputType
  _max?: BookMaxAggregateInputType
}

export type BookGroupByOutputType = {
  id: string
  created_at: Date
  updated_at: Date
  title: string
  author: string | null
  isbn: string | null
  external_id: string | null
  status: $Enums.book_status
  file_path: string | null
  total_pages: number
  _count: BookCountAggregateOutputType | null
  _avg: BookAvgAggregateOutputType | null
  _sum: BookSumAggregateOutputType | null
  _min: BookMinAggregateOutputType | null
  _max: BookMaxAggregateOutputType | null
}

type GetBookGroupByPayload<T extends bookGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BookGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BookGroupByOutputType[P]>
      }
    >
  >



export type bookWhereInput = {
  AND?: Prisma.bookWhereInput | Prisma.bookWhereInput[]
  OR?: Prisma.bookWhereInput[]
  NOT?: Prisma.bookWhereInput | Prisma.bookWhereInput[]
  id?: Prisma.StringFilter<"book"> | string
  created_at?: Prisma.DateTimeFilter<"book"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"book"> | Date | string
  title?: Prisma.StringFilter<"book"> | string
  author?: Prisma.StringNullableFilter<"book"> | string | null
  isbn?: Prisma.StringNullableFilter<"book"> | string | null
  external_id?: Prisma.StringNullableFilter<"book"> | string | null
  status?: Prisma.Enumbook_statusFilter<"book"> | $Enums.book_status
  file_path?: Prisma.StringNullableFilter<"book"> | string | null
  total_pages?: Prisma.IntFilter<"book"> | number
  chapters?: Prisma.ChapterListRelationFilter
}

export type bookOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  title?: Prisma.SortOrder
  author?: Prisma.SortOrderInput | Prisma.SortOrder
  isbn?: Prisma.SortOrderInput | Prisma.SortOrder
  external_id?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  file_path?: Prisma.SortOrderInput | Prisma.SortOrder
  total_pages?: Prisma.SortOrder
  chapters?: Prisma.chapterOrderByRelationAggregateInput
}

export type bookWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  isbn?: string
  AND?: Prisma.bookWhereInput | Prisma.bookWhereInput[]
  OR?: Prisma.bookWhereInput[]
  NOT?: Prisma.bookWhereInput | Prisma.bookWhereInput[]
  created_at?: Prisma.DateTimeFilter<"book"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"book"> | Date | string
  title?: Prisma.StringFilter<"book"> | string
  author?: Prisma.StringNullableFilter<"book"> | string | null
  external_id?: Prisma.StringNullableFilter<"book"> | string | null
  status?: Prisma.Enumbook_statusFilter<"book"> | $Enums.book_status
  file_path?: Prisma.StringNullableFilter<"book"> | string | null
  total_pages?: Prisma.IntFilter<"book"> | number
  chapters?: Prisma.ChapterListRelationFilter
}, "id" | "isbn">

export type bookOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  title?: Prisma.SortOrder
  author?: Prisma.SortOrderInput | Prisma.SortOrder
  isbn?: Prisma.SortOrderInput | Prisma.SortOrder
  external_id?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  file_path?: Prisma.SortOrderInput | Prisma.SortOrder
  total_pages?: Prisma.SortOrder
  _count?: Prisma.bookCountOrderByAggregateInput
  _avg?: Prisma.bookAvgOrderByAggregateInput
  _max?: Prisma.bookMaxOrderByAggregateInput
  _min?: Prisma.bookMinOrderByAggregateInput
  _sum?: Prisma.bookSumOrderByAggregateInput
}

export type bookScalarWhereWithAggregatesInput = {
  AND?: Prisma.bookScalarWhereWithAggregatesInput | Prisma.bookScalarWhereWithAggregatesInput[]
  OR?: Prisma.bookScalarWhereWithAggregatesInput[]
  NOT?: Prisma.bookScalarWhereWithAggregatesInput | Prisma.bookScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"book"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"book"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"book"> | Date | string
  title?: Prisma.StringWithAggregatesFilter<"book"> | string
  author?: Prisma.StringNullableWithAggregatesFilter<"book"> | string | null
  isbn?: Prisma.StringNullableWithAggregatesFilter<"book"> | string | null
  external_id?: Prisma.StringNullableWithAggregatesFilter<"book"> | string | null
  status?: Prisma.Enumbook_statusWithAggregatesFilter<"book"> | $Enums.book_status
  file_path?: Prisma.StringNullableWithAggregatesFilter<"book"> | string | null
  total_pages?: Prisma.IntWithAggregatesFilter<"book"> | number
}

export type bookCreateInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  title: string
  author?: string | null
  isbn?: string | null
  external_id?: string | null
  status?: $Enums.book_status
  file_path?: string | null
  total_pages?: number
  chapters?: Prisma.chapterCreateNestedManyWithoutBookInput
}

export type bookUncheckedCreateInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  title: string
  author?: string | null
  isbn?: string | null
  external_id?: string | null
  status?: $Enums.book_status
  file_path?: string | null
  total_pages?: number
  chapters?: Prisma.chapterUncheckedCreateNestedManyWithoutBookInput
}

export type bookUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  external_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.Enumbook_statusFieldUpdateOperationsInput | $Enums.book_status
  file_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  total_pages?: Prisma.IntFieldUpdateOperationsInput | number
  chapters?: Prisma.chapterUpdateManyWithoutBookNestedInput
}

export type bookUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  external_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.Enumbook_statusFieldUpdateOperationsInput | $Enums.book_status
  file_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  total_pages?: Prisma.IntFieldUpdateOperationsInput | number
  chapters?: Prisma.chapterUncheckedUpdateManyWithoutBookNestedInput
}

export type bookCreateManyInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  title: string
  author?: string | null
  isbn?: string | null
  external_id?: string | null
  status?: $Enums.book_status
  file_path?: string | null
  total_pages?: number
}

export type bookUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  external_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.Enumbook_statusFieldUpdateOperationsInput | $Enums.book_status
  file_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  total_pages?: Prisma.IntFieldUpdateOperationsInput | number
}

export type bookUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  external_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.Enumbook_statusFieldUpdateOperationsInput | $Enums.book_status
  file_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  total_pages?: Prisma.IntFieldUpdateOperationsInput | number
}

export type bookCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  title?: Prisma.SortOrder
  author?: Prisma.SortOrder
  isbn?: Prisma.SortOrder
  external_id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  file_path?: Prisma.SortOrder
  total_pages?: Prisma.SortOrder
}

export type bookAvgOrderByAggregateInput = {
  total_pages?: Prisma.SortOrder
}

export type bookMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  title?: Prisma.SortOrder
  author?: Prisma.SortOrder
  isbn?: Prisma.SortOrder
  external_id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  file_path?: Prisma.SortOrder
  total_pages?: Prisma.SortOrder
}

export type bookMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  title?: Prisma.SortOrder
  author?: Prisma.SortOrder
  isbn?: Prisma.SortOrder
  external_id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  file_path?: Prisma.SortOrder
  total_pages?: Prisma.SortOrder
}

export type bookSumOrderByAggregateInput = {
  total_pages?: Prisma.SortOrder
}

export type BookScalarRelationFilter = {
  is?: Prisma.bookWhereInput
  isNot?: Prisma.bookWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type Enumbook_statusFieldUpdateOperationsInput = {
  set?: $Enums.book_status
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type bookCreateNestedOneWithoutChaptersInput = {
  create?: Prisma.XOR<Prisma.bookCreateWithoutChaptersInput, Prisma.bookUncheckedCreateWithoutChaptersInput>
  connectOrCreate?: Prisma.bookCreateOrConnectWithoutChaptersInput
  connect?: Prisma.bookWhereUniqueInput
}

export type bookUpdateOneRequiredWithoutChaptersNestedInput = {
  create?: Prisma.XOR<Prisma.bookCreateWithoutChaptersInput, Prisma.bookUncheckedCreateWithoutChaptersInput>
  connectOrCreate?: Prisma.bookCreateOrConnectWithoutChaptersInput
  upsert?: Prisma.bookUpsertWithoutChaptersInput
  connect?: Prisma.bookWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.bookUpdateToOneWithWhereWithoutChaptersInput, Prisma.bookUpdateWithoutChaptersInput>, Prisma.bookUncheckedUpdateWithoutChaptersInput>
}

export type bookCreateWithoutChaptersInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  title: string
  author?: string | null
  isbn?: string | null
  external_id?: string | null
  status?: $Enums.book_status
  file_path?: string | null
  total_pages?: number
}

export type bookUncheckedCreateWithoutChaptersInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  title: string
  author?: string | null
  isbn?: string | null
  external_id?: string | null
  status?: $Enums.book_status
  file_path?: string | null
  total_pages?: number
}

export type bookCreateOrConnectWithoutChaptersInput = {
  where: Prisma.bookWhereUniqueInput
  create: Prisma.XOR<Prisma.bookCreateWithoutChaptersInput, Prisma.bookUncheckedCreateWithoutChaptersInput>
}

export type bookUpsertWithoutChaptersInput = {
  update: Prisma.XOR<Prisma.bookUpdateWithoutChaptersInput, Prisma.bookUncheckedUpdateWithoutChaptersInput>
  create: Prisma.XOR<Prisma.bookCreateWithoutChaptersInput, Prisma.bookUncheckedCreateWithoutChaptersInput>
  where?: Prisma.bookWhereInput
}

export type bookUpdateToOneWithWhereWithoutChaptersInput = {
  where?: Prisma.bookWhereInput
  data: Prisma.XOR<Prisma.bookUpdateWithoutChaptersInput, Prisma.bookUncheckedUpdateWithoutChaptersInput>
}

export type bookUpdateWithoutChaptersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  external_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.Enumbook_statusFieldUpdateOperationsInput | $Enums.book_status
  file_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  total_pages?: Prisma.IntFieldUpdateOperationsInput | number
}

export type bookUncheckedUpdateWithoutChaptersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isbn?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  external_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.Enumbook_statusFieldUpdateOperationsInput | $Enums.book_status
  file_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  total_pages?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type BookCountOutputType
 */

export type BookCountOutputType = {
  chapters: number
}

export type BookCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chapters?: boolean | BookCountOutputTypeCountChaptersArgs
}

/**
 * BookCountOutputType without action
 */
export type BookCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BookCountOutputType
   */
  select?: Prisma.BookCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BookCountOutputType without action
 */
export type BookCountOutputTypeCountChaptersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.chapterWhereInput
}


export type bookSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  updated_at?: boolean
  title?: boolean
  author?: boolean
  isbn?: boolean
  external_id?: boolean
  status?: boolean
  file_path?: boolean
  total_pages?: boolean
  chapters?: boolean | Prisma.book$chaptersArgs<ExtArgs>
  _count?: boolean | Prisma.BookCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["book"]>

export type bookSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  updated_at?: boolean
  title?: boolean
  author?: boolean
  isbn?: boolean
  external_id?: boolean
  status?: boolean
  file_path?: boolean
  total_pages?: boolean
}, ExtArgs["result"]["book"]>

export type bookSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  updated_at?: boolean
  title?: boolean
  author?: boolean
  isbn?: boolean
  external_id?: boolean
  status?: boolean
  file_path?: boolean
  total_pages?: boolean
}, ExtArgs["result"]["book"]>

export type bookSelectScalar = {
  id?: boolean
  created_at?: boolean
  updated_at?: boolean
  title?: boolean
  author?: boolean
  isbn?: boolean
  external_id?: boolean
  status?: boolean
  file_path?: boolean
  total_pages?: boolean
}

export type bookOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "created_at" | "updated_at" | "title" | "author" | "isbn" | "external_id" | "status" | "file_path" | "total_pages", ExtArgs["result"]["book"]>
export type bookInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chapters?: boolean | Prisma.book$chaptersArgs<ExtArgs>
  _count?: boolean | Prisma.BookCountOutputTypeDefaultArgs<ExtArgs>
}
export type bookIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type bookIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $bookPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "book"
  objects: {
    chapters: Prisma.$chapterPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    created_at: Date
    updated_at: Date
    title: string
    author: string | null
    isbn: string | null
    external_id: string | null
    status: $Enums.book_status
    file_path: string | null
    total_pages: number
  }, ExtArgs["result"]["book"]>
  composites: {}
}

export type bookGetPayload<S extends boolean | null | undefined | bookDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$bookPayload, S>

export type bookCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<bookFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BookCountAggregateInputType | true
  }

export interface bookDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['book'], meta: { name: 'book' } }
  /**
   * Find zero or one Book that matches the filter.
   * @param {bookFindUniqueArgs} args - Arguments to find a Book
   * @example
   * // Get one Book
   * const book = await prisma.book.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends bookFindUniqueArgs>(args: Prisma.SelectSubset<T, bookFindUniqueArgs<ExtArgs>>): Prisma.Prisma__bookClient<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Book that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {bookFindUniqueOrThrowArgs} args - Arguments to find a Book
   * @example
   * // Get one Book
   * const book = await prisma.book.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends bookFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, bookFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__bookClient<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Book that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookFindFirstArgs} args - Arguments to find a Book
   * @example
   * // Get one Book
   * const book = await prisma.book.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends bookFindFirstArgs>(args?: Prisma.SelectSubset<T, bookFindFirstArgs<ExtArgs>>): Prisma.Prisma__bookClient<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Book that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookFindFirstOrThrowArgs} args - Arguments to find a Book
   * @example
   * // Get one Book
   * const book = await prisma.book.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends bookFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, bookFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__bookClient<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Books that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Books
   * const books = await prisma.book.findMany()
   * 
   * // Get first 10 Books
   * const books = await prisma.book.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends bookFindManyArgs>(args?: Prisma.SelectSubset<T, bookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Book.
   * @param {bookCreateArgs} args - Arguments to create a Book.
   * @example
   * // Create one Book
   * const Book = await prisma.book.create({
   *   data: {
   *     // ... data to create a Book
   *   }
   * })
   * 
   */
  create<T extends bookCreateArgs>(args: Prisma.SelectSubset<T, bookCreateArgs<ExtArgs>>): Prisma.Prisma__bookClient<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Books.
   * @param {bookCreateManyArgs} args - Arguments to create many Books.
   * @example
   * // Create many Books
   * const book = await prisma.book.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends bookCreateManyArgs>(args?: Prisma.SelectSubset<T, bookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Books and returns the data saved in the database.
   * @param {bookCreateManyAndReturnArgs} args - Arguments to create many Books.
   * @example
   * // Create many Books
   * const book = await prisma.book.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Books and only return the `id`
   * const bookWithIdOnly = await prisma.book.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends bookCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, bookCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Book.
   * @param {bookDeleteArgs} args - Arguments to delete one Book.
   * @example
   * // Delete one Book
   * const Book = await prisma.book.delete({
   *   where: {
   *     // ... filter to delete one Book
   *   }
   * })
   * 
   */
  delete<T extends bookDeleteArgs>(args: Prisma.SelectSubset<T, bookDeleteArgs<ExtArgs>>): Prisma.Prisma__bookClient<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Book.
   * @param {bookUpdateArgs} args - Arguments to update one Book.
   * @example
   * // Update one Book
   * const book = await prisma.book.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends bookUpdateArgs>(args: Prisma.SelectSubset<T, bookUpdateArgs<ExtArgs>>): Prisma.Prisma__bookClient<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Books.
   * @param {bookDeleteManyArgs} args - Arguments to filter Books to delete.
   * @example
   * // Delete a few Books
   * const { count } = await prisma.book.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends bookDeleteManyArgs>(args?: Prisma.SelectSubset<T, bookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Books.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Books
   * const book = await prisma.book.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends bookUpdateManyArgs>(args: Prisma.SelectSubset<T, bookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Books and returns the data updated in the database.
   * @param {bookUpdateManyAndReturnArgs} args - Arguments to update many Books.
   * @example
   * // Update many Books
   * const book = await prisma.book.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Books and only return the `id`
   * const bookWithIdOnly = await prisma.book.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends bookUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, bookUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Book.
   * @param {bookUpsertArgs} args - Arguments to update or create a Book.
   * @example
   * // Update or create a Book
   * const book = await prisma.book.upsert({
   *   create: {
   *     // ... data to create a Book
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Book we want to update
   *   }
   * })
   */
  upsert<T extends bookUpsertArgs>(args: Prisma.SelectSubset<T, bookUpsertArgs<ExtArgs>>): Prisma.Prisma__bookClient<runtime.Types.Result.GetResult<Prisma.$bookPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Books.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookCountArgs} args - Arguments to filter Books to count.
   * @example
   * // Count the number of Books
   * const count = await prisma.book.count({
   *   where: {
   *     // ... the filter for the Books we want to count
   *   }
   * })
  **/
  count<T extends bookCountArgs>(
    args?: Prisma.Subset<T, bookCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BookCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Book.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BookAggregateArgs>(args: Prisma.Subset<T, BookAggregateArgs>): Prisma.PrismaPromise<GetBookAggregateType<T>>

  /**
   * Group by Book.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bookGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends bookGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: bookGroupByArgs['orderBy'] }
      : { orderBy?: bookGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, bookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the book model
 */
readonly fields: bookFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for book.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__bookClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  chapters<T extends Prisma.book$chaptersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.book$chaptersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$chapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the book model
 */
export interface bookFieldRefs {
  readonly id: Prisma.FieldRef<"book", 'String'>
  readonly created_at: Prisma.FieldRef<"book", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"book", 'DateTime'>
  readonly title: Prisma.FieldRef<"book", 'String'>
  readonly author: Prisma.FieldRef<"book", 'String'>
  readonly isbn: Prisma.FieldRef<"book", 'String'>
  readonly external_id: Prisma.FieldRef<"book", 'String'>
  readonly status: Prisma.FieldRef<"book", 'book_status'>
  readonly file_path: Prisma.FieldRef<"book", 'String'>
  readonly total_pages: Prisma.FieldRef<"book", 'Int'>
}
    

// Custom InputTypes
/**
 * book findUnique
 */
export type bookFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
  /**
   * Filter, which book to fetch.
   */
  where: Prisma.bookWhereUniqueInput
}

/**
 * book findUniqueOrThrow
 */
export type bookFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
  /**
   * Filter, which book to fetch.
   */
  where: Prisma.bookWhereUniqueInput
}

/**
 * book findFirst
 */
export type bookFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
  /**
   * Filter, which book to fetch.
   */
  where?: Prisma.bookWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of books to fetch.
   */
  orderBy?: Prisma.bookOrderByWithRelationInput | Prisma.bookOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for books.
   */
  cursor?: Prisma.bookWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` books from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` books.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of books.
   */
  distinct?: Prisma.BookScalarFieldEnum | Prisma.BookScalarFieldEnum[]
}

/**
 * book findFirstOrThrow
 */
export type bookFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
  /**
   * Filter, which book to fetch.
   */
  where?: Prisma.bookWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of books to fetch.
   */
  orderBy?: Prisma.bookOrderByWithRelationInput | Prisma.bookOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for books.
   */
  cursor?: Prisma.bookWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` books from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` books.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of books.
   */
  distinct?: Prisma.BookScalarFieldEnum | Prisma.BookScalarFieldEnum[]
}

/**
 * book findMany
 */
export type bookFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
  /**
   * Filter, which books to fetch.
   */
  where?: Prisma.bookWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of books to fetch.
   */
  orderBy?: Prisma.bookOrderByWithRelationInput | Prisma.bookOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing books.
   */
  cursor?: Prisma.bookWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` books from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` books.
   */
  skip?: number
  distinct?: Prisma.BookScalarFieldEnum | Prisma.BookScalarFieldEnum[]
}

/**
 * book create
 */
export type bookCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
  /**
   * The data needed to create a book.
   */
  data: Prisma.XOR<Prisma.bookCreateInput, Prisma.bookUncheckedCreateInput>
}

/**
 * book createMany
 */
export type bookCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many books.
   */
  data: Prisma.bookCreateManyInput | Prisma.bookCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * book createManyAndReturn
 */
export type bookCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * The data used to create many books.
   */
  data: Prisma.bookCreateManyInput | Prisma.bookCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * book update
 */
export type bookUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
  /**
   * The data needed to update a book.
   */
  data: Prisma.XOR<Prisma.bookUpdateInput, Prisma.bookUncheckedUpdateInput>
  /**
   * Choose, which book to update.
   */
  where: Prisma.bookWhereUniqueInput
}

/**
 * book updateMany
 */
export type bookUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update books.
   */
  data: Prisma.XOR<Prisma.bookUpdateManyMutationInput, Prisma.bookUncheckedUpdateManyInput>
  /**
   * Filter which books to update
   */
  where?: Prisma.bookWhereInput
  /**
   * Limit how many books to update.
   */
  limit?: number
}

/**
 * book updateManyAndReturn
 */
export type bookUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * The data used to update books.
   */
  data: Prisma.XOR<Prisma.bookUpdateManyMutationInput, Prisma.bookUncheckedUpdateManyInput>
  /**
   * Filter which books to update
   */
  where?: Prisma.bookWhereInput
  /**
   * Limit how many books to update.
   */
  limit?: number
}

/**
 * book upsert
 */
export type bookUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
  /**
   * The filter to search for the book to update in case it exists.
   */
  where: Prisma.bookWhereUniqueInput
  /**
   * In case the book found by the `where` argument doesn't exist, create a new book with this data.
   */
  create: Prisma.XOR<Prisma.bookCreateInput, Prisma.bookUncheckedCreateInput>
  /**
   * In case the book was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.bookUpdateInput, Prisma.bookUncheckedUpdateInput>
}

/**
 * book delete
 */
export type bookDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
  /**
   * Filter which book to delete.
   */
  where: Prisma.bookWhereUniqueInput
}

/**
 * book deleteMany
 */
export type bookDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which books to delete
   */
  where?: Prisma.bookWhereInput
  /**
   * Limit how many books to delete.
   */
  limit?: number
}

/**
 * book.chapters
 */
export type book$chaptersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chapter
   */
  select?: Prisma.chapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chapter
   */
  omit?: Prisma.chapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chapterInclude<ExtArgs> | null
  where?: Prisma.chapterWhereInput
  orderBy?: Prisma.chapterOrderByWithRelationInput | Prisma.chapterOrderByWithRelationInput[]
  cursor?: Prisma.chapterWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChapterScalarFieldEnum | Prisma.ChapterScalarFieldEnum[]
}

/**
 * book without action
 */
export type bookDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the book
   */
  select?: Prisma.bookSelect<ExtArgs> | null
  /**
   * Omit specific fields from the book
   */
  omit?: Prisma.bookOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bookInclude<ExtArgs> | null
}
